{"version":3,"sources":["Components/Options.jsx","Components/Subcomponents/SingleInput.jsx","Components/Details.jsx","Components/Tables.jsx","worker.js","Components/DataEntry.jsx","Components/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["Options","react_default","a","createElement","className","react_checkbox_group","checkboxDepth","name","value","this","props","options","onChange","onOptionsChange","Component","SingleInput","title","type","inputType","content","controlFunc","placeholder","Details","_this$props","totalKids","handleNumKidsChange","Subcomponents_SingleInput","_this$props2","totalPlayers","totalRounds","handleNumPlayersChange","handleNumRoundsChange","isKidsTable","renderKidsCount","Tables","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTableNameChange","bind","assertThisInitialized","handleTableSizeChange","addTableRow","removeTable","e","tables","handleTablesChange","changedTableValue","target","changedTableId","parseInt","parentNode","id","map","table","objectSpread","size","_this$props3","removedTableId","filter","_this$props4","newTableNum","length","tableName","concat","_this2","renderTableRow","key","onClick","renderTableRows","playerList","tableList","tableDetails","runOrganizer","userInput","kidsTable","changePeople","changeTables","getEmptyPlayerList","getEmptyTableList","initializeData","rounds","sort","b","Math","random","result","numRuns","numRounds","bestRun","maxPlayedWithCount","averageMaxPlayedWithCount","minUniqueTablesVisited","i","resetRunData","resultPlayerList","chooseRandomly","min","apply","toConsumableArray","Set","player","assignedTables","max","playedWith","list","reduce","runRandomXTimes","console","log","runAlgorithm","newPlayerList","emptyPlayer","uniqueTables","playedWithCount","Array","fill","push","JSON","parse","stringify","newTableList","currentPlayers","isFull","forEach","tableChoice","find","includes","playerAtTable","DataEntry","handleOptionsChange","newOptions","setState","newTables","handleClearForm","preventDefault","handleFormSubmit","formPayload","state","numTables","totalTableSpots","Error","handleTablesReady","handleResultReady","firstRun","_this$state","Components_Options","Components_Details","Components_Tables","Results","renderPlayerRow","tableId","index","playerId","tableIndex","t","playedWithList","_this3","round","App","Components_DataEntry","Components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ec6b048.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {Checkbox, CheckboxGroup} from 'react-checkbox-group';\n\nclass Options extends Component {\n  static propTypes = {\n    options: PropTypes.array.isRequired,\n    onOptionsChange: PropTypes.func.isRequired\n  }\n\n  render() {\n    return (\n      <div className='options'>\n        <h3>Options</h3>\n        <CheckboxGroup\n          className='checkbox-group'\n          checkboxDepth={2}\n          name=\"options\"\n          value={this.props.options}\n          onChange={this.props.onOptionsChange}>\n\n          <label><Checkbox value=\"kidsTable\"/> Kids' Table</label>\n          <label><Checkbox value=\"changeTables\"/> Always Change Tables</label>\n          <label><Checkbox value=\"changePeople\"/> Play With Different People</label>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n\n}\nexport default Options;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Pure functional component defined as a const\nconst SingleInput = (props) => (\n      <div className=\"form-group\">\n        <label className=\"form-label\">{props.title}</label>\n        <input\n          className=\"form-input\"\n          name={props.name}\n          type={props.inputType}\n          value={props.content}\n          onChange={props.controlFunc}\n          placeholder={props.placeholder} />\n      </div>\n    );\n\nSingleInput.propTypes = {\n  inputType: PropTypes.oneOf(['text', 'number']).isRequired,\n  title: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  controlFunc: PropTypes.func.isRequired,\n  content: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  placeholder: PropTypes.string,\n};\n\nexport default SingleInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Details extends Component {\n  static propTypes = {\n    isKidsTable: PropTypes.bool.isRequired,\n    totalKids: PropTypes.number.isRequired,\n    totalPlayers: PropTypes.number.isRequired,\n    totalRounds: PropTypes.number.isRequired,\n    handleNumKidsChange: PropTypes.func.isRequired,\n    handleNumPlayersChange: PropTypes.func.isRequired,\n    handleNumRoundsChange: PropTypes.func.isRequired\n  }\n\n  renderKidsCount() {\n    const {totalKids, handleNumKidsChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Number of Kids: '\n        name='totalKids'\n        controlFunc={handleNumKidsChange}//TODO zero out num kids on isKidsTable change or ignore if isKidsTable is false\n        content={totalKids}\n        />\n    );\n  }\n//TODO decide whether kids count towards total and handle them\n  render() {\n    const {totalPlayers, totalRounds, handleNumPlayersChange, handleNumRoundsChange, isKidsTable} = this.props;\n    return (\n      <div className='details'>\n        <h3>Details</h3>\n        <SingleInput\n          inputType='number'\n          title='Number of Players: '\n          name='totalPlayers'\n          controlFunc={handleNumPlayersChange}\n          content={totalPlayers}\n          />\n        <SingleInput\n          inputType='number'\n          title='Number of Rounds: '\n          name='totalRounds'\n          controlFunc={handleNumRoundsChange}\n          content={totalRounds}\n          />\n        {isKidsTable && this.renderKidsCount()}\n      </div>\n    );\n  }\n\n}\nexport default Details;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Tables extends Component {\n  static propTypes = {\n    tables: PropTypes.array.isRequired,\n    handleTablesChange: PropTypes.func.isRequired\n  }\n  constructor(props) {\n    super(props);\n    this.handleTableNameChange = this.handleTableNameChange.bind(this);\n    this.handleTableSizeChange = this.handleTableSizeChange.bind(this);\n    this.addTableRow = this.addTableRow.bind(this);\n    this.removeTable = this.removeTable.bind(this);\n}\n\n  handleTableNameChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = e.target.value;\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, name: changedTableValue};\n      }\n      return table;\n    })\n    handleTablesChange(newTables);\n  }\n\n  handleTableSizeChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = parseInt(e.target.value) ? parseInt(e.target.value) : 0;\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, size: changedTableValue};\n      }\n      return table;\n    })\n    handleTablesChange(newTables);\n  }\n\n  removeTable(e) {\n    const {tables, handleTablesChange} = this.props;\n    const removedTableId = parseInt(e.target.parentNode.id);\n    const newTables = tables.filter(table => table.id !== removedTableId)\n    handleTablesChange(newTables);\n  }\n\n  addTableRow() {\n    const {tables, handleTablesChange} = this.props;\n    const newTableNum = tables.length + 1;//TODO handle removed tables causing repeat values\n    const tableName = 'Table ' + newTableNum;\n    const newTables = tables.concat({\n      id: newTableNum,\n      name: tableName,\n      size: 4\n    })\n    handleTablesChange(newTables);\n  }\n\n  renderTableRows() {\n    const {tables} = this.props;\n    return (\n        <ol className='table-list'>\n          {tables.map(table => this.renderTableRow(table))}\n        </ol>\n    );\n  }\n\n  renderTableRow(table) {\n    return (\n      <li key={table.id} id={table.id} className='table-row'>\n        <SingleInput\n          inputType='text'\n          title='Name: '\n          name='tableName'\n          controlFunc={this.handleTableNameChange}\n          content={table.name}\n          />\n        <SingleInput\n          inputType='number'\n          title='Size: '\n          name='tableSize'\n          controlFunc={this.handleTableSizeChange}\n          content={table.size}\n          />\n        <button type='button' className='remove-button' onClick={this.removeTable}>X</button>\n      </li>\n    );\n  }\n\n  render() {\n    return (\n      <div className='tables'>\n        <h3>Tables</h3>\n        {this.renderTableRows()}\n        <button type='button' className='button' onClick={this.addTableRow}>Add Table</button>\n      </div>\n    );\n  }\n\n}\nexport default Tables;\n","let playerList = [];\nlet tableList = [];\nlet totalRounds = 0;\nlet totalPlayers = 0;\nlet tableDetails = [];\nlet options = {};\n\nexport function runOrganizer(userInput) {\n  initializeData(userInput);\n  return runAlgorithm(userInput.totalRounds);\n}\n\nfunction initializeData(userInput) {\n  totalRounds = userInput.totalRounds;\n  totalPlayers = userInput.totalPlayers;\n  tableDetails = userInput.tables;\n  options = {\n    kidsTable: userInput.kidsTable,\n    changePeople: userInput.changePeople,\n    changeTables: userInput.changeTables\n  }\n  playerList = getEmptyPlayerList();\n  tableList = getEmptyTableList();\n}\n\nfunction getEmptyPlayerList() {\n  let newPlayerList = [];\n  for (var i=0; i<totalPlayers; i++) {\n    const emptyPlayer = {\n      id: i,\n      assignedTables: [],\n      uniqueTables: 0,\n      playedWithCount: 0,\n      playedWith: new Array(totalPlayers).fill(0,0)//used as a dictionary to map other player IDs to playedWithCounts\n    }\n    newPlayerList.push(JSON.parse(JSON.stringify(emptyPlayer)));\n  }\n  return JSON.parse(JSON.stringify(newPlayerList));\n}\n\nfunction getEmptyTableList() {\n  const newTableList = tableDetails.map(function(table) { return {...table, currentPlayers: [], isFull: false}});\n  return JSON.parse(JSON.stringify(newTableList));\n}\n\nfunction resetRunData() {\n  tableList = getEmptyTableList();\n  playerList = getEmptyPlayerList();\n}\n\n// Randomly pick for each round then chose the best overall run\nfunction runAlgorithm(rounds) {\n  // Reset data between rounds\n  tableList = getEmptyTableList();\n\n  // Start by randomly sorting lists\n  playerList.sort(function(a, b){return 0.5 - Math.random()});\n  tableList.sort(function(a, b){return 0.5 - Math.random()});\n\n  //Different Run Options\n  const result = runRandomXTimes(500, totalRounds); // 500 is a good number\n  console.log('RESULT', result);\n  return result;\n}\n\nfunction runRandomXTimes(numRuns, numRounds) {\n  let bestRun = {\n    playerList: [],\n    maxPlayedWithCount: 100,\n    averageMaxPlayedWithCount: 100,\n    minUniqueTablesVisited: 0\n  };\n  for (var i = 0; i < numRuns; i++) {\n    // Reset data between runs\n    resetRunData();\n    let resultPlayerList = [];\n    let maxPlayedWithCount = 100;\n    let averageMaxPlayedWithCount = 100;\n    let minUniqueTablesVisited = 0;\n\n    resultPlayerList = chooseRandomly(numRounds);//returns a cloned version of the global playerList\n    // minimum number of unique tables visited - to help with the changeTables constraint\n    // calculated by creating an array of unique tables for each player, getting the lengths of those lists , then finding the minimum value among the players\n    minUniqueTablesVisited = Math.min(...[...new Set(resultPlayerList.map(\n      (player) => [...new Set(player.assignedTables)].length))]);\n    // max times anyone played with anyone else\n    // calculated by finding the max playedWith count for each player then taking the max of those values\n    maxPlayedWithCount = Math.max(...resultPlayerList.map(\n      (player) => Math.max(...player.playedWith)\n    ));\n    // average of max times everyone played with a specific person\n    // calculated by finding the maxPlayedWithCount for each player and then taking the average of those values\n    averageMaxPlayedWithCount = average(resultPlayerList.map(\n      (player) => Math.max(...player.playedWith)\n    ));\n\n\n\n    // Replace result if better\n    if (options.changeTables) {\n      if (maxPlayedWithCount <= bestRun.maxPlayedWithCount\n        && averageMaxPlayedWithCount <= bestRun.averageMaxPlayedWithCount\n        && minUniqueTablesVisited > bestRun.minUniqueTablesVisited) {\n          bestRun = {\n            playerList: resultPlayerList,\n            maxPlayedWithCount: maxPlayedWithCount,\n            averageMaxPlayedWithCount: averageMaxPlayedWithCount,\n            minUniqueTablesVisited: minUniqueTablesVisited\n          }\n      }\n    } else if (maxPlayedWithCount <= bestRun.maxPlayedWithCount && averageMaxPlayedWithCount <= bestRun.averageMaxPlayedWithCount) {\n      bestRun = {\n        playerList: resultPlayerList,\n        maxPlayedWithCount: maxPlayedWithCount,\n        averageMaxPlayedWithCount: averageMaxPlayedWithCount,\n        minUniqueTablesVisited: minUniqueTablesVisited\n      }\n    }\n  }\n  return bestRun;\n}\n\nfunction average(list) {\n  return list.reduce((a,b) => b+=a) / list.length;\n}\n\nfunction chooseRandomly(numRounds) {\n  for (var i = 0; i < numRounds; i++) {\n    // Reset data between rounds\n    tableList.forEach(table => {\n      table.isFull = false;\n      table.currentPlayers = [];\n    });\n\n    // Start by randomly sorting lists\n    playerList.sort(function(a, b){return 0.5 - Math.random()});\n    tableList.sort(function(a, b){return 0.5 - Math.random()});\n\n    // Have each player (random order) find a not-full table (random order)\n    joinRandomTable();\n  }\n  return JSON.parse(JSON.stringify(playerList));\n}\n\nfunction joinRandomTable() {\n  playerList.forEach(function(player) {\n    //Chose the first table that's not full\n    const tableChoice = tableList.find(table => !table.isFull);\n    // Add table to player's list and increment unique count\n    if (!(player.assignedTables.includes(tableChoice.id))) {\n      player.uniqueTables++;\n    }\n    player.assignedTables.push(tableChoice.id);\n    // Add player to table's current players\n    tableChoice.currentPlayers.push(player);\n    // Mark if the table is full\n    if (tableChoice.currentPlayers.length === tableChoice.size) {\n      tableChoice.isFull = true;\n    }\n    // Mark who's playing with each other\n    tableChoice.currentPlayers.forEach(function(playerAtTable) {\n      if (player.id !== playerAtTable.id) {\n        // increment player.playedWith counts for each player at this table\n        player.playedWith[playerAtTable.id]++;\n        // increment other players in currentPlayers playedWith counts using index/player.id\n        playerAtTable.playedWith[player.id]++;\n        // increment overall playedWithCount even though it's not used in this algorithm\n        player.playedWithCount++;\n      }\n    });\n  })\n}\n","import React, { Component } from 'react';\nimport Options from './Options.jsx';\nimport Details from './Details.jsx';\nimport Tables from './Tables.jsx';\nimport { runOrganizer } from '../worker.js';\n\nclass DataEntry extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOptionsChange = this.handleOptionsChange.bind(this);\n    this.handleNumPlayersChange = this.handleNumPlayersChange.bind(this);\n    this.handleNumRoundsChange = this.handleNumRoundsChange.bind(this);\n    this.handleNumKidsChange = this.handleNumKidsChange.bind(this);\n    this.handleTablesChange = this.handleTablesChange.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    this.state = {//TODO put back to normal\n      firstRun: true,\n      options: ['changePeople', 'changeTables'],\n      totalPlayers: 42,\n      // totalPlayers: 10,\n      totalRounds: 4,\n      totalKids: 0,\n      // tables: [\n      //     {\n      //       id: 1,\n      //       name: 'Table 1',\n      //       size: 2\n      //     },\n      //     {\n      //       id: 2,\n      //       name: 'Table 2',\n      //       size: 2\n      //     },\n      //     {\n      //       id: 3,\n      //       name: 'Table 3',\n      //       size: 3\n      //     },\n      //     {\n      //       id: 4,\n      //       name: 'Table 4',\n      //       size: 3\n      //     },\n      // ],\n      tables: [\n        {\n          id: 1,\n          name: 'Table 1',\n          size: 4\n        },\n        {\n          id: 2,\n          name: 'Table 2',\n          size: 4\n        },\n        {\n          id: 3,\n          name: 'Table 3',\n          size: 4\n        },\n        {\n          id: 4,\n          name: 'Table 4',\n          size: 6\n        },\n        {\n          id: 5,\n          name: 'Table 5',\n          size: 6\n        },\n        {\n          id: 6,\n          name: 'Table 6',\n          size: 6\n        },\n        {\n          id: 7,\n          name: 'Table 7',\n          size: 6\n        },\n        {\n          id: 8,\n          name: 'Table 8',\n          size: 6\n        }\n      ],\n      result: {}\n    };\n  }\n//TODO add games list to table object\n//TODO handle other options\n  handleOptionsChange = (newOptions) => {\n    this.setState({\n      options: newOptions\n    });\n  }\n\n  handleNumPlayersChange = (e) => {\n    this.setState({\n      totalPlayers: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleNumRoundsChange = (e) => {\n    this.setState({\n      totalRounds: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleNumKidsChange = (e) => {\n    this.setState({\n      totalKids: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleTablesChange = (newTables) => {\n    this.setState({\n      tables: newTables\n    });\n  }\n\n  handleClearForm = (e) => {\n    e.preventDefault();\n    this.setState({\n      options: ['changePeople'],\n      totalPlayers: 0,\n      totalRounds: 0,\n      totalKids: 0,\n      tables: [{\n        id: 1,\n        name: 'Table 1',\n        size: 4\n      }],\n      result: {}\n    });\n  }\n\n  handleFormSubmit = (e) => {\n  e.preventDefault();\n\n  const formPayload = {\n    changePeople: this.state.options.includes('changePeople'),\n    changeTables: this.state.options.includes('changeTables'),\n    kidsTable: this.state.options.includes('kidsTable'),\n    totalPlayers: this.state.totalPlayers,\n    totalRounds: this.state.totalRounds,\n    totalKids: this.state.options.includes('kidsTable') ? this.state.totalKids : 0,\n    numTables: this.state.tables.length,\n    tables: this.state.tables\n\n  };\n\n  console.log('Send this in a POST request:', formPayload);\n  const totalTableSpots = formPayload.tables.reduce(function(a, b) {\n        return a + b.size;\n    }, 0);\n  if (formPayload.totalPlayers !== totalTableSpots) {\n    throw new Error('Number of players must match number of table spots');\n  } else {\n    let result = runOrganizer(formPayload);\n    // this.handleClearForm(e);\n    this.props.handleTablesReady(this.state.tables);\n    this.props.handleResultReady(result);\n    this.setState({firstRun: false});\n  }\n}\n\n  render() {\n    const {options, totalPlayers, totalRounds, totalKids, tables} = this.state;\n    return (\n      <div>\n        <h2>Enter Your Data</h2>\n        <Options\n          options={options}\n          onOptionsChange={this.handleOptionsChange} />\n        <Details\n          isKidsTable={options.includes('kidsTable') ? true : false}\n          totalPlayers={totalPlayers}\n          totalRounds={totalRounds}\n          totalKids={totalKids}\n          handleNumPlayersChange={this.handleNumPlayersChange}\n          handleNumRoundsChange={this.handleNumRoundsChange}\n          handleNumKidsChange={this.handleNumKidsChange} />\n        <Tables\n          tables={tables}\n          handleTablesChange={this.handleTablesChange}/>\n        <button type='submit' className='button' onClick={this.handleFormSubmit}>{this.state.firstRun ? 'Run': 'Run Again'}</button>\n      </div>\n    );\n  }\n}\n//TODO on form submit, convert options to booleans\n//TODO render tables without isKidsTable option for now\n//TODO consider mimicing excel and optimizing after randomness not during picking\n/*TODO add Configuration and Constraints middle pane or bottom section:\n* Runtime options: run once, get the best of x number of times, or maybe run until the conditions are met (with a max/timeout returning the best so far?)\n* Constraints: conditions to define best (e.g. no playedWithCount over 3, minimize all playedWithCounts, no stayAtTableCount over 2)\n*/\nexport default DataEntry;\n","import React, { Component } from 'react';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.renderPlayerRow = this.renderPlayerRow.bind(this);\n    this.renderTableRow = this.renderTableRow.bind(this);\n  }\n\n  renderPlayerRow(player) {\n    return (\n      <li key={player.id}>\n        <p>Player {player.id + 1}:</p>\n        <ol>\n          {player.assignedTables.map((tableId, index) => this.renderTableRow(player.id, index, tableId))}\n        </ol>\n      </li>\n    );\n  }\n\n  renderTableRow(playerId, tableIndex, tableId) {\n    const tableDetails = this.props.tables.find(t => t.id === tableId);\n    return (<li key={playerId + '-' + tableIndex}>{tableDetails.name} ({tableDetails.size})</li>);\n  }\n\n  renderPlayedWith(playedWithList) {\n    return playedWithList.map(player => (<li>{player.id} {player.playedWithCount}</li>));\n  }\n\n  render() {\n    const {result} = this.props;\n    console.log(result);\n    return (\n      <div>\n        <h2>Results</h2>\n        <p>Max of Everyone's Max Times Played With Someone: {result.maxPlayedWithCount}</p>\n        <p>Average of Everyone's Max Times Played With Someone: {Math.round(result.averageMaxPlayedWithCount * 100) / 100}</p>\n        <p>Minimum Number of Unique Tables Visited: {result.minUniqueTablesVisited}</p>\n        <ol>\n          {result.playerList.length > 0 &&\n            result.playerList.sort((a,b) => a.id-b.id).map(player => this.renderPlayerRow(player))}\n        </ol>\n      </div>\n    );\n\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataEntry from './Components/DataEntry.jsx';\nimport Results from './Components/Results.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleResultReady = this.handleResultReady.bind(this);\n    this.handleTablesReady = this.handleTablesReady.bind(this);\n\n    this.state = {\n      result: {\n        playerList: [],\n        maxPlayedWithCount: 0,\n        averageMaxPlayedWithCount: 0,\n        minUniqueTablesVisited: 0\n      }\n    }\n  }\n\n  handleResultReady = (result) => {\n    this.setState({\n      result: result\n    });\n  }\n\n  handleTablesReady = (tables) => {\n    this.setState({\n      tables: tables\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>GameFest</h1>\n        <div className='App-body'>\n          <div className='left-pane'>\n            <DataEntry\n              handleResultReady={this.handleResultReady}\n              handleTablesReady={this.handleTablesReady}/>\n          </div>\n          <div className='right-pane'>\n            <Results\n              result={this.state.result}\n              tables={this.state.tables}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}