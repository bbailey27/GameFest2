{"version":3,"sources":["Components/Options.jsx","Components/Subcomponents/SingleInput.jsx","Components/Details.jsx","Components/Tables.jsx","worker.js","Components/DataEntry.jsx","Components/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["Options","react_default","a","createElement","className","react_checkbox_group","checkboxDepth","name","value","this","props","options","onChange","onOptionsChange","Component","SingleInput","title","concat","classNames","type","inputType","content","controlFunc","placeholder","Details","_this$props","totalKids","handleNumKidsChange","Subcomponents_SingleInput","_this$props2","totalPlayers","totalRounds","handleNumPlayersChange","handleNumRoundsChange","isKidsTable","renderKidsCount","Tables","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTableNameChange","bind","assertThisInitialized","handleTableSizeChange","handleTableGamesChange","addTableRow","removeTable","e","tables","handleTablesChange","changedTableValue","target","changedTableId","parseInt","parentNode","id","map","table","objectSpread","size","_this$props3","newGameList","split","games","_this$props4","removedTableId","filter","_this$props5","newTableNum","length","tableName","_this2","renderTableRow","key","toString","onClick","renderTableRows","playerList","tableList","tableDetails","runOrganizer","userInput","kidsTable","changePeople","changeTables","getEmptyPlayerList","getEmptyTableList","initializeData","rounds","sort","b","Math","random","result","numRuns","numRounds","bestRun","maxPlayedWithCount","averageMaxPlayedWithCount","minUniqueTablesVisited","i","resetRunData","resultPlayerList","chooseRandomly","min","apply","toConsumableArray","Set","player","assignedTables","max","playedWith","list","reduce","compareResults","runRandomXTimes","console","log","runAlgorithm","newPlayerList","emptyPlayer","uniqueTables","playedWithCount","Array","fill","push","JSON","parse","stringify","newTableList","currentPlayers","isFull","maxPlayedWithCountCheck","averageMaxPlayedWithCountCheck","minUniqueTablesVisitedCheck","forEach","tableChoice","find","includes","playerAtTable","DataEntry","handleOptionsChange","newOptions","setState","newTables","handleClearForm","preventDefault","handleFormSubmit","formPayload","state","numTables","totalTableSpots","Error","handleTablesReady","handleResultReady","firstRun","_this$state","Components_Options","Components_Details","Components_Tables","Results","download","formattedData","formatData","encodedData","btoa","dataURL","document","href","setAttribute","click","toBijective","n","floor","toUpperCase","data","playerTitle","tableData","tableId","index","t","tableGame","trim","renderPlayerRow","playerId","tableIndex","playedWithList","_this3","round","App","Components_DataEntry","Components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5627edb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {Checkbox, CheckboxGroup} from 'react-checkbox-group';\n\nclass Options extends Component {\n  static propTypes = {\n    options: PropTypes.array.isRequired,\n    onOptionsChange: PropTypes.func.isRequired\n  }\n\n  render() {\n    return (\n      <div className='options'>\n        <h3>Options</h3>\n        <CheckboxGroup\n          className='checkbox-group'\n          checkboxDepth={2}\n          name=\"options\"\n          value={this.props.options}\n          onChange={this.props.onOptionsChange}>\n\n          <label><Checkbox value=\"kidsTable\"/> Kids' Table</label>\n          <label><Checkbox value=\"changeTables\"/> Always Change Tables</label>\n          <label><Checkbox value=\"changePeople\"/> Play With Different People</label>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n\n}\nexport default Options;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Pure functional component defined as a const\nconst SingleInput = (props) => (\n      <div className=\"form-group\">\n        <label className=\"form-label\">{props.title}</label>\n        <input\n          className={`form-input ${props.classNames}`}\n          name={props.name}\n          type={props.inputType}\n          value={props.content}\n          onChange={props.controlFunc}\n          placeholder={props.placeholder} />\n      </div>\n    );\n\nSingleInput.propTypes = {\n  inputType: PropTypes.oneOf(['text', 'number']).isRequired,\n  title: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  controlFunc: PropTypes.func.isRequired,\n  content: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  placeholder: PropTypes.string,\n};\n\nexport default SingleInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Details extends Component {\n  static propTypes = {\n    isKidsTable: PropTypes.bool.isRequired,\n    totalKids: PropTypes.number.isRequired,\n    totalPlayers: PropTypes.number.isRequired,\n    totalRounds: PropTypes.number.isRequired,\n    handleNumKidsChange: PropTypes.func.isRequired,\n    handleNumPlayersChange: PropTypes.func.isRequired,\n    handleNumRoundsChange: PropTypes.func.isRequired\n  }\n\n  renderKidsCount() {\n    const {totalKids, handleNumKidsChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Number of Kids: '\n        name='totalKids'\n        controlFunc={handleNumKidsChange}//TODO zero out num kids on isKidsTable change or ignore if isKidsTable is false\n        content={totalKids}\n        />\n    );\n  }\n//TODO decide whether kids count towards total and handle them\n  render() {\n    const {totalPlayers, totalRounds, handleNumPlayersChange, handleNumRoundsChange, isKidsTable} = this.props;\n    return (\n      <div className='details'>\n        <h3>Details</h3>\n        <SingleInput\n          inputType='number'\n          title='Number of Players: '\n          name='totalPlayers'\n          controlFunc={handleNumPlayersChange}\n          content={totalPlayers}\n          />\n        <SingleInput\n          inputType='number'\n          title='Number of Rounds: '\n          name='totalRounds'\n          controlFunc={handleNumRoundsChange}\n          content={totalRounds}\n          />\n        {isKidsTable && this.renderKidsCount()}\n      </div>\n    );\n  }\n\n}\nexport default Details;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Tables extends Component {\n  static propTypes = {\n    tables: PropTypes.array.isRequired,\n    handleTablesChange: PropTypes.func.isRequired\n  }\n  constructor(props) {\n    super(props);\n    this.handleTableNameChange = this.handleTableNameChange.bind(this);\n    this.handleTableSizeChange = this.handleTableSizeChange.bind(this);\n    this.handleTableGamesChange = this.handleTableGamesChange.bind(this);\n    this.addTableRow = this.addTableRow.bind(this);\n    this.removeTable = this.removeTable.bind(this);\n}\n\n  handleTableNameChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = e.target.value;\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, name: changedTableValue};\n      }\n      return table;\n    });\n    handleTablesChange(newTables);\n  }\n\n  handleTableSizeChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = parseInt(e.target.value) ? parseInt(e.target.value) : 0;\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, size: changedTableValue};\n      }\n      return table;\n    });\n    handleTablesChange(newTables);\n  }\n\n  handleTableGamesChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = e.target.value;\n    const newGameList = changedTableValue.split(',');\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, games: newGameList};\n      }\n      return table;\n    });\n    handleTablesChange(newTables);\n  }\n\n  removeTable(e) {\n    const {tables, handleTablesChange} = this.props;\n    const removedTableId = parseInt(e.target.parentNode.id);\n    const newTables = tables.filter(table => table.id !== removedTableId)\n    handleTablesChange(newTables);\n  }\n\n  addTableRow() {\n    const {tables, handleTablesChange} = this.props;\n    const newTableNum = tables.length + 1;//TODO handle removed tables causing repeat values\n    const tableName = 'Table ' + newTableNum;\n    const newTables = tables.concat({\n      id: newTableNum,\n      name: tableName,\n      size: 4,\n      games: []\n    })\n    handleTablesChange(newTables);\n  }\n\n  renderTableRows() {\n    const {tables} = this.props;\n    return (\n        <ol className='table-list'>\n          {tables.map(table => this.renderTableRow(table))}\n        </ol>\n    );\n  }\n\n  renderTableRow(table) {\n    return (\n      <li key={table.id} id={table.id} className='table-row'>\n        <SingleInput\n          inputType='text'\n          title='Name: '\n          name='tableName'\n          controlFunc={this.handleTableNameChange}\n          content={table.name}\n          />\n        <SingleInput\n          inputType='number'\n          title='Size: '\n          name='tableSize'\n          controlFunc={this.handleTableSizeChange}\n          content={table.size}\n          />\n        <SingleInput\n          inputType='text'\n          classNames='game-input'\n          title='Games: '\n          name='tableGames'\n          controlFunc={this.handleTableGamesChange}\n          content={table.games.toString()}\n          />\n        <button type='button' className='remove-button' onClick={this.removeTable}>X</button>\n      </li>\n    );\n  }\n\n  render() {\n    return (\n      <div className='tables'>\n        <h3>Tables</h3>\n        <h5>Please enter a comma-separated list of games, with the same number of games as rounds</h5>\n        {this.renderTableRows()}\n        <button type='button' className='button' onClick={this.addTableRow}>Add Table</button>\n      </div>\n    );\n  }\n\n}\nexport default Tables;\n","let playerList = [];\nlet tableList = [];\nlet totalRounds = 0;\nlet totalPlayers = 0;\nlet tableDetails = [];\nlet options = {};\n\nexport function runOrganizer(userInput) {\n  initializeData(userInput);\n  return runAlgorithm(userInput.totalRounds);\n}\n\nfunction initializeData(userInput) {\n  totalRounds = userInput.totalRounds;\n  totalPlayers = userInput.totalPlayers;\n  tableDetails = userInput.tables;\n  options = {\n    kidsTable: userInput.kidsTable,\n    changePeople: userInput.changePeople,\n    changeTables: userInput.changeTables\n  }\n  playerList = getEmptyPlayerList();\n  tableList = getEmptyTableList();\n}\n\nfunction getEmptyPlayerList() {\n  let newPlayerList = [];\n  for (var i=0; i<totalPlayers; i++) {\n    const emptyPlayer = {\n      id: i,\n      assignedTables: [],\n      uniqueTables: 0,\n      playedWithCount: 0,\n      playedWith: new Array(totalPlayers).fill(0,0)//used as a dictionary to map other player IDs to playedWithCounts\n    }\n    newPlayerList.push(JSON.parse(JSON.stringify(emptyPlayer)));\n  }\n  return JSON.parse(JSON.stringify(newPlayerList));\n}\n\nfunction getEmptyTableList() {\n  const newTableList = tableDetails.map(function(table) { return {...table, currentPlayers: [], isFull: false}});\n  return JSON.parse(JSON.stringify(newTableList));\n}\n\nfunction resetRunData() {\n  tableList = getEmptyTableList();\n  playerList = getEmptyPlayerList();\n}\n\n// Randomly pick for each round then chose the best overall run\nfunction runAlgorithm(rounds) {\n  // Reset data between rounds\n  tableList = getEmptyTableList();\n\n  // Start by randomly sorting lists\n  playerList.sort(function(a, b){return 0.5 - Math.random()});\n  tableList.sort(function(a, b){return 0.5 - Math.random()});\n\n  //Different Run Options\n  const result = runRandomXTimes(500, totalRounds); // 500 is a good number\n  console.log('RESULT', result);\n  return result;\n}\n\nfunction runRandomXTimes(numRuns, numRounds) {\n  let bestRun = {\n    playerList: [],\n    maxPlayedWithCount: 100,\n    averageMaxPlayedWithCount: 100,\n    minUniqueTablesVisited: 0\n  };\n  for (var i = 0; i < numRuns; i++) {\n    // Reset data between runs\n    resetRunData();\n    let resultPlayerList = [];\n    let maxPlayedWithCount = 100;\n    let averageMaxPlayedWithCount = 100;\n    let minUniqueTablesVisited = 0;\n\n    resultPlayerList = chooseRandomly(numRounds);//returns a cloned version of the global playerList\n    // minimum number of unique tables visited - to help with the changeTables constraint\n    // calculated by creating an array of unique tables for each player, getting the lengths of those lists , then finding the minimum value among the players\n    minUniqueTablesVisited = Math.min(...[...new Set(resultPlayerList.map(\n      (player) => [...new Set(player.assignedTables)].length))]);\n    // max times anyone played with anyone else\n    // calculated by finding the max playedWith count for each player then taking the max of those values\n    maxPlayedWithCount = Math.max(...resultPlayerList.map(\n      (player) => Math.max(...player.playedWith)\n    ));\n    // average of max times everyone played with a specific person\n    // calculated by finding the maxPlayedWithCount for each player and then taking the average of those values\n    averageMaxPlayedWithCount = average(resultPlayerList.map(\n      (player) => Math.max(...player.playedWith)\n    ));\n\n    // Replace result if better\n    bestRun = compareResults(resultPlayerList, minUniqueTablesVisited, maxPlayedWithCount, averageMaxPlayedWithCount, bestRun);\n  }\n  return bestRun;\n}\n\nfunction average(list) {\n  return list.reduce((a,b) => b+=a) / list.length;\n}\n\nfunction compareResults(resultPlayerList, minUniqueTablesVisited, maxPlayedWithCount, averageMaxPlayedWithCount, bestRun) {\n  const maxPlayedWithCountCheck = options.changePeople ? (maxPlayedWithCount <= bestRun.maxPlayedWithCount) : true;\n  const averageMaxPlayedWithCountCheck = options.changePeople ? (averageMaxPlayedWithCount <= bestRun.averageMaxPlayedWithCount) : true;\n  const minUniqueTablesVisitedCheck = options.changeTables ? (minUniqueTablesVisited > bestRun.minUniqueTablesVisited) : true;\n  const isNewResultBetter = maxPlayedWithCountCheck && averageMaxPlayedWithCountCheck && minUniqueTablesVisitedCheck;\n  if (isNewResultBetter) {\n    return {\n      playerList: resultPlayerList,\n      maxPlayedWithCount: maxPlayedWithCount,\n      averageMaxPlayedWithCount: averageMaxPlayedWithCount,\n      minUniqueTablesVisited: minUniqueTablesVisited\n    }\n  } else {\n    return bestRun;\n  }\n}\n\nfunction chooseRandomly(numRounds) {\n  for (var i = 0; i < numRounds; i++) {\n    // Reset data between rounds\n    tableList.forEach(table => {\n      table.isFull = false;\n      table.currentPlayers = [];\n    });\n\n    // Start by randomly sorting lists\n    playerList.sort(function(a, b){return 0.5 - Math.random()});\n    tableList.sort(function(a, b){return 0.5 - Math.random()});\n\n    // Have each player (random order) find a not-full table (random order)\n    joinRandomTable();\n  }\n  return JSON.parse(JSON.stringify(playerList));\n}\n\nfunction joinRandomTable() {\n  playerList.forEach(function(player) {\n    //Chose the first table that's not full\n    const tableChoice = tableList.find(table => !table.isFull);\n    // Add table to player's list and increment unique count\n    if (!(player.assignedTables.includes(tableChoice.id))) {\n      player.uniqueTables++;\n    }\n    player.assignedTables.push(tableChoice.id);\n    // Add player to table's current players\n    tableChoice.currentPlayers.push(player);\n    // Mark if the table is full\n    if (tableChoice.currentPlayers.length === tableChoice.size) {\n      tableChoice.isFull = true;\n    }\n    // Mark who's playing with each other\n    tableChoice.currentPlayers.forEach(function(playerAtTable) {\n      if (player.id !== playerAtTable.id) {\n        // increment player.playedWith counts for each player at this table\n        player.playedWith[playerAtTable.id]++;\n        // increment other players in currentPlayers playedWith counts using index/player.id\n        playerAtTable.playedWith[player.id]++;\n        // increment overall playedWithCount even though it's not used in this algorithm\n        player.playedWithCount++;\n      }\n    });\n  })\n}\n","import React, { Component } from 'react';\nimport Options from './Options.jsx';\nimport Details from './Details.jsx';\nimport Tables from './Tables.jsx';\nimport { runOrganizer } from '../worker.js';\n\nclass DataEntry extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOptionsChange = this.handleOptionsChange.bind(this);\n    this.handleNumPlayersChange = this.handleNumPlayersChange.bind(this);\n    this.handleNumRoundsChange = this.handleNumRoundsChange.bind(this);\n    this.handleNumKidsChange = this.handleNumKidsChange.bind(this);\n    this.handleTablesChange = this.handleTablesChange.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    this.state = {//TODO put back to normal\n      firstRun: true,\n      options: ['changePeople', 'changeTables'],\n      totalPlayers: 10,\n      totalRounds: 4,\n      totalKids: 0,\n      tables: [\n          {\n            id: 1,\n            name: 'Table 1',\n            size: 2,\n            games: []\n          },\n          {\n            id: 2,\n            name: 'Table 2',\n            size: 2,\n            games: []\n          },\n          {\n            id: 3,\n            name: 'Table 3',\n            size: 3,\n            games: []\n          },\n          {\n            id: 4,\n            name: 'Table 4',\n            size: 3,\n            games: []\n          },\n      ],\n      result: {}\n    };\n  }\n//TODO add games list to table object\n//TODO handle other options\n  handleOptionsChange = (newOptions) => {\n    this.setState({\n      options: newOptions\n    });\n  }\n\n  handleNumPlayersChange = (e) => {\n    this.setState({\n      totalPlayers: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleNumRoundsChange = (e) => {\n    this.setState({\n      totalRounds: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleNumKidsChange = (e) => {\n    this.setState({\n      totalKids: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleTablesChange = (newTables) => {\n    this.setState({\n      tables: newTables\n    });\n  }\n\n  handleClearForm = (e) => {\n    e.preventDefault();\n    this.setState({\n      options: ['changePeople'],\n      totalPlayers: 0,\n      totalRounds: 0,\n      totalKids: 0,\n      tables: [{\n        id: 1,\n        name: 'Table 1',\n        size: 4\n      }],\n      result: {}\n    });\n  }\n\n  handleFormSubmit = (e) => {\n  e.preventDefault();\n\n  const formPayload = {\n    changePeople: this.state.options.includes('changePeople'),\n    changeTables: this.state.options.includes('changeTables'),\n    kidsTable: this.state.options.includes('kidsTable'),\n    totalPlayers: this.state.totalPlayers,\n    totalRounds: this.state.totalRounds,\n    totalKids: this.state.options.includes('kidsTable') ? this.state.totalKids : 0,\n    numTables: this.state.tables.length,\n    tables: this.state.tables\n  };\n\n  console.log('Send this in a POST request:', formPayload);\n  const totalTableSpots = formPayload.tables.reduce(function(a, b) {\n        return a + b.size;\n    }, 0);\n  if (formPayload.totalPlayers !== totalTableSpots) {\n    throw new Error('Number of players must match number of table spots');\n  } else {\n    let result = runOrganizer(formPayload);\n    // this.handleClearForm(e);\n    this.props.handleTablesReady(this.state.tables);\n    this.props.handleResultReady(result);\n    this.setState({firstRun: false});\n  }\n}\n\n  render() {\n    const {options, totalPlayers, totalRounds, totalKids, tables} = this.state;\n    return (\n      <div>\n        <h2>Enter Your Data</h2>\n        <Options\n          options={options}\n          onOptionsChange={this.handleOptionsChange} />\n        <Details\n          isKidsTable={options.includes('kidsTable') ? true : false}\n          totalPlayers={totalPlayers}\n          totalRounds={totalRounds}\n          totalKids={totalKids}\n          handleNumPlayersChange={this.handleNumPlayersChange}\n          handleNumRoundsChange={this.handleNumRoundsChange}\n          handleNumKidsChange={this.handleNumKidsChange} />\n        <Tables\n          tables={tables}\n          handleTablesChange={this.handleTablesChange}/>\n        <button type='submit' className='button run-button' onClick={this.handleFormSubmit}>{this.state.firstRun ? 'Run': 'Run Again'}</button>\n      </div>\n    );\n  }\n}\n\n//TODO render tables without isKidsTable option for now\n/*TODO add Configuration and Constraints middle pane or bottom/top section:\n* Runtime options: run once, get the best of x number of times, or maybe run until the conditions are met (with a max/timeout returning the best so far?)\n* Constraints: conditions to define best (e.g. no playedWithCount over 3, minimize all playedWithCounts, no stayAtTableCount over 2)\n*/\nexport default DataEntry;\n","import React, { Component } from 'react';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.renderPlayerRow = this.renderPlayerRow.bind(this);\n    this.renderTableRow = this.renderTableRow.bind(this);\n  }\n\n  download = () => {\n    const formattedData = this.formatData(this.props.result.playerList.sort((a,b) => a.id-b.id));\n    const encodedData = btoa(formattedData);\n    const dataURL = `data:text/octet-stream;base64,${encodedData}`;\n    const a = document.createElement(\"a\");\n    a.href = dataURL;\n    a.setAttribute(\"download\", \"gamefest.txt\");\n    a.click();\n  };\n\n  toBijective = n => (n > 26 ? this.toBijective(Math.floor((n - 1) / 26)) : \"\") + ((n % 26 || 26) + 9).toString(36).toUpperCase();\n\n  formatData = (data) => {\n    let formattedData = \"\";\n    data.forEach((player) => {\n      const playerTitle = `Player ${this.toBijective(player.id+1)}`;\n      let tableData = \"\";\n      player.assignedTables.forEach((tableId, index) => {\n        const tableDetails = this.props.tables.find(t => t.id === tableId);\n        const tableGame = tableDetails.games[index] && tableDetails.games[index].trim();\n        tableData += `Round ${index+1}: ${tableDetails.name}${tableGame ? ` - ${tableGame}` : ''}\\n`;\n      });\n      formattedData += `${playerTitle}\\n${tableData}\\n\\n`;\n    });\n    return formattedData;\n  };\n\n  renderPlayerRow(player) {\n    return (\n      <li key={player.id} className='result-list-item'>\n        <p>Player {player.id + 1}:</p>\n        <ol>\n          {player.assignedTables.map((tableId, index) => this.renderTableRow(player.id, index, tableId))}\n        </ol>\n      </li>\n    );\n  }\n\n  renderTableRow(playerId, tableIndex, tableId) {\n    const tableDetails = this.props.tables.find(t => t.id === tableId);\n    return (<li key={playerId + '-' + tableIndex} className='result-list-item'>{tableDetails.name} ({tableDetails.size})</li>);\n  }\n\n  renderPlayedWith(playedWithList) {\n    return playedWithList.map(player => (<li>{player.id} {player.playedWithCount}</li>));\n  }\n\n  render() {\n    const {result} = this.props;\n    console.log(result);\n    return (\n      <div>\n        <h2>Results</h2>\n        <p>Max of Everyone's Max Times Played With Someone: {result.maxPlayedWithCount}</p>\n        <p>Average of Everyone's Max Times Played With Someone: {Math.round(result.averageMaxPlayedWithCount * 100) / 100}</p>\n        <p>Minimum Number of Unique Tables Visited: {result.minUniqueTablesVisited}</p>\n        <button onClick={() => this.download()} className='download-button'>Download This Result</button>\n        <ol>\n          {result.playerList.length > 0 &&\n            result.playerList.sort((a,b) => a.id-b.id).map(player => this.renderPlayerRow(player))}\n        </ol>\n      </div>\n    );\n\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataEntry from './Components/DataEntry.jsx';\nimport Results from './Components/Results.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleResultReady = this.handleResultReady.bind(this);\n    this.handleTablesReady = this.handleTablesReady.bind(this);\n\n    this.state = {\n      result: {\n        playerList: [],\n        maxPlayedWithCount: 0,\n        averageMaxPlayedWithCount: 0,\n        minUniqueTablesVisited: 0\n      }\n    }\n  }\n\n  handleResultReady = (result) => {\n    this.setState({\n      result: result\n    });\n  }\n\n  handleTablesReady = (tables) => {\n    this.setState({\n      tables: tables\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>GameFest</h1>\n        <div className='App-body'>\n          <div className='left-pane'>\n            <DataEntry\n              handleResultReady={this.handleResultReady}\n              handleTablesReady={this.handleTablesReady}/>\n          </div>\n          <div className='right-pane'>\n            <Results\n              result={this.state.result}\n              tables={this.state.tables}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}