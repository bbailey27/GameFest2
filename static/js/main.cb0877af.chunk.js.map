{"version":3,"sources":["Components/Options.jsx","Components/Subcomponents/SingleInput.jsx","Components/Details.jsx","Components/Constraints.jsx","Components/Algorithms.jsx","Components/Tables.jsx","worker.js","Components/DataEntry.jsx","Components/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["Options","react_default","a","createElement","className","react_checkbox_group","checkboxDepth","name","value","this","props","options","onChange","onOptionsChange","Component","SingleInput","title","concat","classNames","type","inputType","min","max","content","controlFunc","placeholder","Details","_this$props","totalKids","handleNumKidsChange","Subcomponents_SingleInput","_this$props2","totalPlayers","totalRounds","handleNumPlayersChange","handleNumRoundsChange","isKidsTable","renderKidsCount","Constraints","changePeopleOption","includes","changeTablesOption","renderMaxPlayedWithAllowedInput","renderMaxAveragePlayedWithAllowedInput","renderMinUniqueTablesAllowedInput","renderMaxRunsInput","maxPlayedWithAllowed","handleNumberChange","e","maxAveragePlayedWithAllowed","_this$props3","minUniqueTablesAllowed","_this$props4","maxRuns","_this$props5","numTimesToRun","algorithmChoice","renderRunUntilConstraints","renderRunXTimesInput","Algorithms","lib","handleAlgorithmChange","css","width","Components_Constraints","Tables","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTableNameChange","bind","assertThisInitialized","handleTableSizeChange","handleTableGamesChange","addTableRow","removeTable","tables","handleTablesChange","changedTableValue","target","changedTableId","parseInt","parentNode","id","map","table","objectSpread","size","newGameList","split","games","removedTableId","filter","newTableNum","length","tableName","_this2","renderTableRow","key","toString","onClick","style","padding","marginTop","renderTableRows","playerList","tableList","tableDetails","algorithmDetails","runOrganizer","userInput","kidsTable","changePeople","changeTables","getEmptyPlayerList","getEmptyTableList","initializeData","result","sort","b","Math","random","runRandomXTimes","constraintsMet","maxPlayedWithCount","averageMaxPlayedWithCount","minUniqueTablesVisited","runCount","runRandomAndChooseBest","checkConstraints","runUntilConstraints","console","log","runAlgorithm","newPlayerList","i","emptyPlayer","assignedTables","uniqueTables","playedWithCount","playedWith","Array","fill","push","JSON","parse","stringify","newTableList","currentPlayers","isFull","_algorithmDetails","getMaxPlayedWithCount","getAverageMaxPlayedWithCount","getMinUniqueTablesVisited","currentBestRun","resultPlayerList","bestRun","maxPlayedWithCountCheck","averageMaxPlayedWithCountCheck","minUniqueTablesVisitedCheck","compareResults","numRounds","forEach","player","tableChoice","find","playerAtTable","chooseRandomly","numRuns","apply","toConsumableArray","Set","list","reduce","defaultData","firstRun","DataEntry","handleOptionsChange","newOptions","setState","property","defineProperty","newAlgo","newTables","handleClearForm","preventDefault","handleFormSubmit","formPayload","state","numTables","totalTableSpots","Error","handleTablesReady","handleResultReady","_this$state","Components_Options","Components_Details","Components_Algorithms","Components_Tables","Results","download","formattedData","formatData","encodedData","btoa","dataURL","document","href","setAttribute","click","toBijective","n","floor","toUpperCase","data","playerTitle","tableData","tableId","index","t","tableGame","trim","renderPlayerRow","playerId","tableIndex","playedWithList","_this3","round","App","Components_DataEntry","Components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb0877af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {Checkbox, CheckboxGroup} from 'react-checkbox-group';\n\nclass Options extends Component {\n  static propTypes = {\n    options: PropTypes.array.isRequired,\n    onOptionsChange: PropTypes.func.isRequired\n  }\n\n  render() {\n    return (\n      <div className='options data-entry-subsection'>\n        <h3>Options</h3>\n        <CheckboxGroup\n          className='checkbox-group'\n          checkboxDepth={2}\n          name=\"options\"\n          value={this.props.options}\n          onChange={this.props.onOptionsChange}>\n\n          <label><Checkbox value=\"kidsTable\"/> Kids' Table</label>\n          <label><Checkbox value=\"changeTables\"/> Always Change Tables</label>\n          <label><Checkbox value=\"changePeople\"/> Play With Different People</label>\n        </CheckboxGroup>\n      </div>\n    );\n  }\n\n}\nexport default Options;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Pure functional component defined as a const\nconst SingleInput = (props) => (\n      <div className=\"form-group\">\n        <label className=\"form-label\">{props.title}</label>\n        <input\n          className={`form-input ${props.classNames}`}\n          name={props.name}\n          type={props.inputType}\n          min={props.min}\n          max={props.max}\n          value={props.content}\n          onChange={props.controlFunc}\n          placeholder={props.placeholder} />\n      </div>\n    );\n\nSingleInput.propTypes = {\n  inputType: PropTypes.oneOf(['text', 'number']).isRequired,\n  title: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  controlFunc: PropTypes.func.isRequired,\n  content: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  placeholder: PropTypes.string,\n};\n\nexport default SingleInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Details extends Component {\n  static propTypes = {\n    isKidsTable: PropTypes.bool.isRequired,\n    totalKids: PropTypes.number.isRequired,\n    totalPlayers: PropTypes.number.isRequired,\n    totalRounds: PropTypes.number.isRequired,\n    handleNumKidsChange: PropTypes.func.isRequired,\n    handleNumPlayersChange: PropTypes.func.isRequired,\n    handleNumRoundsChange: PropTypes.func.isRequired\n  }\n\n  renderKidsCount() {\n    const {totalKids, handleNumKidsChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Number of Kids: '\n        name='totalKids'\n        controlFunc={handleNumKidsChange}//TODO zero out num kids on isKidsTable change or ignore if isKidsTable is false\n        content={totalKids}\n        />\n    );\n  }\n//TODO decide whether kids count towards total and handle them\n  render() {\n    const {totalPlayers, totalRounds, handleNumPlayersChange, handleNumRoundsChange, isKidsTable} = this.props;\n    return (\n      <div className='details data-entry-subsection'>\n        <h3>Details</h3>\n        <SingleInput\n          inputType='number'\n          title='Number of Players: '\n          name='totalPlayers'\n          controlFunc={handleNumPlayersChange}\n          content={totalPlayers}\n          />\n        <SingleInput\n          inputType='number'\n          title='Number of Rounds: '\n          name='totalRounds'\n          controlFunc={handleNumRoundsChange}\n          content={totalRounds}\n          />\n        {isKidsTable && this.renderKidsCount()}\n      </div>\n    );\n  }\n\n}\nexport default Details;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Constraints extends Component {\n  // keep maxPlayedWithCount under _\n  // keep averageMaxPlayedWithCount under _\n  // minUniqueTablesVisited over _\n  static propTypes = {\n    algorithmChoice: PropTypes.string.isRequired,\n    totalRounds: PropTypes.number.isRequired,\n    options: PropTypes.array.isRequired,\n    numTimesToRun: PropTypes.number.isRequired,\n    maxPlayedWithAllowed: PropTypes.number.isRequired,\n    maxAveragePlayedWithAllowed: PropTypes.number.isRequired,\n    minUniqueTablesAllowed: PropTypes.number.isRequired,\n    maxRuns: PropTypes.number.isRequired,\n    handleNumberChange: PropTypes.func.isRequired\n  }\n\n  renderRunUntilConstraints() {\n    const {options} = this.props;\n    const changePeopleOption = options.includes('changePeople');\n    const changeTablesOption = options.includes('changeTables');\n    return (\n      <div>\n        {changePeopleOption && this.renderMaxPlayedWithAllowedInput()}\n        {changePeopleOption && this.renderMaxAveragePlayedWithAllowedInput()}\n        {changeTablesOption && this.renderMinUniqueTablesAllowedInput()}\n        {changeTablesOption && this.renderMaxRunsInput()}\n      </div>\n    );\n  }\n\n  renderMaxPlayedWithAllowedInput() {\n    const {totalRounds, maxPlayedWithAllowed, handleNumberChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Max number of plays with same person allowed: '\n        name='maxPlayedWithAllowed'\n        controlFunc={(e) => handleNumberChange(e, 'maxPlayedWithAllowed')}\n        content={maxPlayedWithAllowed}\n        max={totalRounds}\n        min={1}\n        />\n    );\n  }\n\n  renderMaxAveragePlayedWithAllowedInput() {\n    const {totalRounds, maxAveragePlayedWithAllowed, handleNumberChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Max allowed average number of plays with same person: '\n        name='maxAveragePlayedWithAllowed'\n        controlFunc={(e) => handleNumberChange(e, 'maxAveragePlayedWithAllowed')}\n        content={maxAveragePlayedWithAllowed}\n        max={totalRounds}\n        min={1}\n        />\n    );\n  }\n\n  renderMinUniqueTablesAllowedInput() {\n    const {totalRounds, minUniqueTablesAllowed, handleNumberChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Minimum allowed number of unique tables visited: '\n        name='minUniqueTablesAllowed'\n        controlFunc={(e) => handleNumberChange(e, 'minUniqueTablesAllowed')}\n        content={minUniqueTablesAllowed}\n        max={totalRounds}\n        min={1}\n        />\n    );\n  }\n\n  renderMaxRunsInput() {\n    const {maxRuns, handleNumberChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Max times to run: '\n        name='maxRuns'\n        controlFunc={(e) => handleNumberChange(e, 'maxRuns')}\n        content={maxRuns}\n        max={10000}\n        min={1}\n        />\n    );\n  }\n\n  renderRunXTimesInput() {\n    const {numTimesToRun, handleNumberChange} = this.props;\n    return (\n      <SingleInput\n        inputType='number'\n        title='Number of times to run: '\n        name='numTimesToRun'\n        controlFunc={(e) => handleNumberChange(e, 'numTimesToRun')}\n        content={numTimesToRun}\n        max={10000}\n        min={1}\n        />\n    );\n  }\n\n  render() {\n    return (\n      <div className='constraints'>\n        {this.props.algorithmChoice === 'runUntilConstraints' && this.renderRunUntilConstraints()}\n        {this.props.algorithmChoice === 'runRandomXTimes' && this.renderRunXTimesInput()}\n      </div>\n    );\n  }\n\n}\nexport default Constraints;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { RadioGroup, RadioButton } from 'react-radio-buttons';\nimport Constraints from './Constraints';\n\nclass Algorithms extends Component {\n  static propTypes = {\n    algorithmChoice: PropTypes.string.isRequired,\n    totalRounds: PropTypes.number.isRequired,\n    options: PropTypes.array.isRequired,\n    maxPlayedWithAllowed: PropTypes.number.isRequired,\n    maxAveragePlayedWithAllowed: PropTypes.number.isRequired,\n    minUniqueTablesAllowed: PropTypes.number.isRequired,\n    maxRuns: PropTypes.number.isRequired,\n    handleAlgorithmChange: PropTypes.func.isRequired,\n    handleNumberChange: PropTypes.func.isRequired\n  }\n\n  render() {\n    return (\n      <div className='data-entry-section'>\n        <h3>Algorithm Options</h3>\n        <RadioGroup onChange={ this.props.handleAlgorithmChange } value={this.props.algorithmChoice} className='radio-button'>\n          <RadioButton value='runRandomXTimes' css={{width: '100%'}}>\n            Best of X Random Runs\n          </RadioButton>\n          <RadioButton value='runUntilConstraints'>\n            Run Until Custom Constraints Met\n          </RadioButton>\n        </RadioGroup>\n        <Constraints\n          algorithmChoice={this.props.algorithmChoice}\n          totalRounds={this.props.totalRounds}\n          options={this.props.options}\n          numTimesToRun={this.props.numTimesToRun}\n          maxPlayedWithAllowed={this.props.maxPlayedWithAllowed}\n          maxAveragePlayedWithAllowed={this.props.maxAveragePlayedWithAllowed}\n          minUniqueTablesAllowed={this.props.minUniqueTablesAllowed}\n          maxRuns={this.props.maxRuns}\n          handleNumberChange={this.props.handleNumberChange}\n         />\n      </div>\n    );\n  }\n\n}\nexport default Algorithms;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleInput from './Subcomponents/SingleInput';\n\nclass Tables extends Component {\n  static propTypes = {\n    tables: PropTypes.array.isRequired,\n    handleTablesChange: PropTypes.func.isRequired\n  }\n  constructor(props) {\n    super(props);\n    this.handleTableNameChange = this.handleTableNameChange.bind(this);\n    this.handleTableSizeChange = this.handleTableSizeChange.bind(this);\n    this.handleTableGamesChange = this.handleTableGamesChange.bind(this);\n    this.addTableRow = this.addTableRow.bind(this);\n    this.removeTable = this.removeTable.bind(this);\n}\n\n  handleTableNameChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = e.target.value;\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, name: changedTableValue};\n      }\n      return table;\n    });\n    handleTablesChange(newTables);\n  }\n\n  handleTableSizeChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = parseInt(e.target.value) ? parseInt(e.target.value) : 0;\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, size: changedTableValue};\n      }\n      return table;\n    });\n    handleTablesChange(newTables);\n  }\n\n  handleTableGamesChange(e) {\n    const {tables, handleTablesChange} = this.props;\n    const changedTableValue = e.target.value;\n    const newGameList = changedTableValue.split(',');\n    const changedTableId = parseInt(e.target.parentNode.parentNode.id);\n    const newTables = tables.map(table => {\n      if(table.id === changedTableId) {\n        return {...table, games: newGameList};\n      }\n      return table;\n    });\n    handleTablesChange(newTables);\n  }\n\n  removeTable(e) {\n    const {tables, handleTablesChange} = this.props;\n    const removedTableId = parseInt(e.target.parentNode.id);\n    const newTables = tables.filter(table => table.id !== removedTableId)\n    handleTablesChange(newTables);\n  }\n\n  addTableRow() {\n    const {tables, handleTablesChange} = this.props;\n    const newTableNum = tables.length + 1;//TODO handle removed tables causing repeat values\n    const tableName = 'Table ' + newTableNum;\n    const newTables = tables.concat({\n      id: newTableNum,\n      name: tableName,\n      size: 4,\n      games: []\n    })\n    handleTablesChange(newTables);\n  }\n\n  renderTableRows() {\n    const {tables} = this.props;\n    return (\n        <ol className='table-list'>\n          {tables.map(table => this.renderTableRow(table))}\n        </ol>\n    );\n  }\n\n  renderTableRow(table) {\n    return (\n      <li key={table.id} id={table.id} className='table-row'>\n        <SingleInput\n          inputType='text'\n          title='Name: '\n          name='tableName'\n          controlFunc={this.handleTableNameChange}\n          content={table.name}\n          />\n        <SingleInput\n          inputType='number'\n          title='Size: '\n          name='tableSize'\n          controlFunc={this.handleTableSizeChange}\n          content={table.size}\n          />\n        <SingleInput\n          inputType='text'\n          classNames='game-input'\n          title='Games: '\n          name='tableGames'\n          controlFunc={this.handleTableGamesChange}\n          content={table.games.toString()}\n          />\n        <button type='button' className='remove-button' onClick={this.removeTable}>X</button>\n      </li>\n    );\n  }\n\n  render() {\n    return (\n      <div className='tables'>\n        <h3>Tables</h3>\n        <p style={{padding:'0 1rem', marginTop: 0}}>(Optional) Please enter a comma-separated list of games for each round</p>\n        {this.renderTableRows()}\n        <button type='button' className='button' onClick={this.addTableRow}>Add Table</button>\n      </div>\n    );\n  }\n\n}\nexport default Tables;\n","let playerList = [];\nlet tableList = [];\nlet totalRounds = 0;\nlet totalPlayers = 0;\nlet tableDetails = [];\nlet options = {};\nlet algorithmChoice = '';\nlet algorithmDetails = {};\n\nexport function runOrganizer(userInput) {\n  initializeData(userInput);\n  return runAlgorithm();\n}\n\nfunction initializeData(userInput) {\n  totalRounds = userInput.totalRounds;\n  totalPlayers = userInput.totalPlayers;\n  tableDetails = userInput.tables;\n  options = {\n    kidsTable: userInput.kidsTable,\n    changePeople: userInput.changePeople,\n    changeTables: userInput.changeTables\n  };\n  playerList = getEmptyPlayerList();\n  tableList = getEmptyTableList();\n  algorithmChoice = userInput.algorithmChoice;\n  algorithmDetails = {\n    numTimesToRun: userInput.numTimesToRun,\n    maxPlayedWithAllowed: userInput.maxPlayedWithAllowed,\n    maxAveragePlayedWithAllowed: userInput.maxAveragePlayedWithAllowed,\n    minUniqueTablesAllowed: userInput.minUniqueTablesAllowed,\n    maxRuns: userInput.maxRuns\n  };\n}\n\nfunction getEmptyPlayerList() {\n  let newPlayerList = [];\n  for (var i=0; i<totalPlayers; i++) {\n    const emptyPlayer = {\n      id: i,\n      assignedTables: [],\n      uniqueTables: 0,\n      playedWithCount: 0,\n      playedWith: new Array(totalPlayers).fill(0,0)//used as a dictionary to map other player IDs to playedWithCounts\n    }\n    newPlayerList.push(JSON.parse(JSON.stringify(emptyPlayer)));\n  }\n  return JSON.parse(JSON.stringify(newPlayerList));\n}\n\nfunction getEmptyTableList() {\n  const newTableList = tableDetails.map(function(table) { return {...table, currentPlayers: [], isFull: false}});\n  return JSON.parse(JSON.stringify(newTableList));\n}\n\nfunction resetRunData() {\n  tableList = getEmptyTableList();\n  playerList = getEmptyPlayerList();\n}\n\n// Randomly pick for each round then chose the best overall run\nfunction runAlgorithm() {\n  // Reset data between rounds\n  tableList = getEmptyTableList();\n\n  // Start by randomly sorting lists\n  playerList.sort(function(a, b){return 0.5 - Math.random()});\n  tableList.sort(function(a, b){return 0.5 - Math.random()});\n\n  // Different Run Options\n  let result;\n  switch (algorithmChoice) {\n    case 'runRandomXTimes':\n      result = runRandomXTimes(algorithmDetails.numTimesToRun); // 500 is a good number\n      break;\n    case 'runUntilConstraints':\n      result = runUntilConstraints();\n      break;\n    default:\n      result = runRandomXTimes(algorithmDetails.numTimesToRun); // 500 is a good number\n      break;\n  }\n  console.log('RESULT', result);\n  return result;\n}\n\n// todo add max times to run\nfunction runUntilConstraints() {\n  let constraintsMet = false;\n  let result = {\n    playerList: [],\n    maxPlayedWithCount: 100,\n    averageMaxPlayedWithCount: 100,\n    minUniqueTablesVisited: 0\n  };\n  let runCount = 0;\n  while (!constraintsMet && (runCount < algorithmDetails.maxRuns)) {\n    result = runRandomAndChooseBest(result);\n    constraintsMet = checkConstraints(result);\n    runCount++;\n  }\n  return result;\n}\n\nfunction checkConstraints(result) {\n  const {maxPlayedWithAllowed, maxAveragePlayedWithAllowed, minUniqueTablesAllowed} = algorithmDetails;\n  const maxPlayedWithCount = getMaxPlayedWithCount(result.playerList);\n  const averageMaxPlayedWithCount = getAverageMaxPlayedWithCount(result.playerList);\n  const minUniqueTablesVisited = getMinUniqueTablesVisited(result.playerList);\n  const constraintsMet =\n    maxPlayedWithCount <= maxPlayedWithAllowed\n    && averageMaxPlayedWithCount <= maxAveragePlayedWithAllowed\n    && minUniqueTablesVisited >= minUniqueTablesAllowed;\n  return constraintsMet;\n}\n\nfunction runRandomAndChooseBest(currentBestRun) {\n  // Reset data between runs\n  resetRunData();\n\n  const resultPlayerList = chooseRandomly(totalRounds);//returns a cloned version of the global playerList\n\n  // Replace result if better\n  return compareResults(resultPlayerList, currentBestRun);\n}\n\nfunction runRandomXTimes(numRuns) {\n  let bestRun = {\n    playerList: [],\n    maxPlayedWithCount: 100,\n    averageMaxPlayedWithCount: 100,\n    minUniqueTablesVisited: 0\n  };\n  for (var i = 0; i < numRuns; i++) {\n    bestRun = runRandomAndChooseBest(bestRun);\n  }\n  return bestRun;\n}\n\nfunction average(list) {\n  return list.reduce((a,b) => b+=a) / list.length;\n}\n\nfunction getMinUniqueTablesVisited(resultPlayerList) {\n  // minimum number of unique tables visited - to help with the changeTables constraint\n  // calculated by creating an array of unique tables for each player, getting the lengths of those lists , then finding the minimum value among the players\n  return Math.min(...[...new Set(resultPlayerList.map(\n    (player) => [...new Set(player.assignedTables)].length))]);\n}\n\nfunction getMaxPlayedWithCount(resultPlayerList) {\n  // max times anyone played with anyone else\n  // calculated by finding the max playedWith count for each player then taking the max of those values\n  return Math.max(...resultPlayerList.map(\n    (player) => Math.max(...player.playedWith)\n  ));\n}\n\nfunction getAverageMaxPlayedWithCount(resultPlayerList) {\n  // average of max times everyone played with a specific person\n  // calculated by finding the maxPlayedWithCount for each player and then taking the average of those values\n  return average(resultPlayerList.map(\n    (player) => Math.max(...player.playedWith)\n  ));\n}\n\nfunction compareResults(resultPlayerList, bestRun) {\n  const minUniqueTablesVisited = getMinUniqueTablesVisited(resultPlayerList);\n  const maxPlayedWithCount = getMaxPlayedWithCount(resultPlayerList);\n  const averageMaxPlayedWithCount = getAverageMaxPlayedWithCount(resultPlayerList);\n  const maxPlayedWithCountCheck = options.changePeople ? (maxPlayedWithCount <= bestRun.maxPlayedWithCount) : true;\n  const averageMaxPlayedWithCountCheck = options.changePeople ? (averageMaxPlayedWithCount <= bestRun.averageMaxPlayedWithCount) : true;\n  const minUniqueTablesVisitedCheck = options.changeTables ? (minUniqueTablesVisited > bestRun.minUniqueTablesVisited) : true;\n  const isNewResultBetter = maxPlayedWithCountCheck && averageMaxPlayedWithCountCheck && minUniqueTablesVisitedCheck;\n  if (isNewResultBetter) {\n    return {\n      playerList: resultPlayerList,\n      maxPlayedWithCount: maxPlayedWithCount,\n      averageMaxPlayedWithCount: averageMaxPlayedWithCount,\n      minUniqueTablesVisited: minUniqueTablesVisited\n    }\n  } else {\n    return bestRun;\n  }\n}\n\nfunction chooseRandomly(numRounds) {\n  for (var i = 0; i < numRounds; i++) {\n    // Reset data between rounds\n    tableList.forEach(table => {\n      table.isFull = false;\n      table.currentPlayers = [];\n    });\n\n    // Start by randomly sorting lists\n    playerList.sort(function(a, b){return 0.5 - Math.random()});\n    tableList.sort(function(a, b){return 0.5 - Math.random()});\n\n    // Have each player (random order) find a not-full table (random order)\n    joinRandomTable();\n  }\n  return JSON.parse(JSON.stringify(playerList));\n}\n\nfunction joinRandomTable() {\n  playerList.forEach(function(player) {\n    //Chose the first table that's not full\n    const tableChoice = tableList.find(table => !table.isFull);\n    // Add table to player's list and increment unique count\n    if (!(player.assignedTables.includes(tableChoice.id))) {\n      player.uniqueTables++;\n    }\n    player.assignedTables.push(tableChoice.id);\n    // Add player to table's current players\n    tableChoice.currentPlayers.push(player);\n    // Mark if the table is full\n    if (tableChoice.currentPlayers.length === tableChoice.size) {\n      tableChoice.isFull = true;\n    }\n    // Mark who's playing with each other\n    tableChoice.currentPlayers.forEach(function(playerAtTable) {\n      if (player.id !== playerAtTable.id) {\n        // increment player.playedWith counts for each player at this table\n        player.playedWith[playerAtTable.id]++;\n        // increment other players in currentPlayers playedWith counts using index/player.id\n        playerAtTable.playedWith[player.id]++;\n        // increment overall playedWithCount even though it's not used in this algorithm\n        player.playedWithCount++;\n      }\n    });\n  })\n}\n","import React, { Component } from 'react';\nimport Options from './Options';\nimport Details from './Details';\nimport Algorithms from './Algorithms';\nimport Tables from './Tables';\nimport { runOrganizer } from '../worker';\n\nconst defaultData = {\n  firstRun: true,\n  options: ['changePeople', 'changeTables'],\n  totalPlayers: 10,\n  totalRounds: 4,\n  totalKids: 0,\n  algorithmChoice: 'runRandomXTimes',\n  numTimesToRun: 500,\n  maxPlayedWithAllowed: 4,\n  maxAveragePlayedWithAllowed: 4,\n  minUniqueTablesAllowed: 1,\n  maxRuns: 10000,\n  tables: [\n      {\n        id: 1,\n        name: 'Table 1',\n        size: 2,\n        games: []\n      },\n      {\n        id: 2,\n        name: 'Table 2',\n        size: 2,\n        games: []\n      },\n      {\n        id: 3,\n        name: 'Table 3',\n        size: 3,\n        games: []\n      },\n      {\n        id: 4,\n        name: 'Table 4',\n        size: 3,\n        games: []\n      },\n  ],\n  result: {}\n};\n\nclass DataEntry extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOptionsChange = this.handleOptionsChange.bind(this);\n    this.handleNumPlayersChange = this.handleNumPlayersChange.bind(this);\n    this.handleNumRoundsChange = this.handleNumRoundsChange.bind(this);\n    this.handleNumKidsChange = this.handleNumKidsChange.bind(this);\n    this.handleNumberChange = this.handleNumberChange.bind(this);\n    this.handleAlgorithmChange = this.handleAlgorithmChange.bind(this);\n    this.handleTablesChange = this.handleTablesChange.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n    this.state = JSON.parse(JSON.stringify(defaultData));\n  }\n\n  //TODO handle other options\n  handleOptionsChange = (newOptions) => {\n    this.setState({\n      options: newOptions\n    });\n  }\n\n  handleNumPlayersChange = (e) => {\n    this.setState({\n      totalPlayers: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleNumRoundsChange = (e) => {\n    this.setState({\n      totalRounds: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleNumKidsChange = (e) => {\n    this.setState({\n      totalKids: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n//todo use this for other number values\n//todo variable defaults if this is an error?\n  handleNumberChange = (e, property) => {\n    this.setState({\n      [property]: parseInt(e.target.value) ? parseInt(e.target.value) : 0\n    });\n  }\n\n  handleAlgorithmChange = (newAlgo) => {\n    this.setState({\n      algorithmChoice: newAlgo\n    });\n  }\n\n  handleTablesChange = (newTables) => {\n    this.setState({\n      tables: newTables\n    });\n  }\n\n  handleClearForm = (e) => {\n    e.preventDefault();\n    this.setState(JSON.parse(JSON.stringify(defaultData)));\n  }\n\n  handleFormSubmit = (e) => {\n  e.preventDefault();\n\n  const formPayload = {\n    changePeople: this.state.options.includes('changePeople'),\n    changeTables: this.state.options.includes('changeTables'),\n    kidsTable: this.state.options.includes('kidsTable'),\n    totalPlayers: this.state.totalPlayers,\n    totalRounds: this.state.totalRounds,\n    totalKids: this.state.options.includes('kidsTable') ? this.state.totalKids : 0,\n    algorithmChoice: this.state.algorithmChoice,\n    numTimesToRun: this.state.numTimesToRun,\n    maxPlayedWithAllowed: this.state.maxPlayedWithAllowed,\n    maxAveragePlayedWithAllowed: this.state.maxAveragePlayedWithAllowed,\n    minUniqueTablesAllowed: this.state.minUniqueTablesAllowed,\n    maxRuns: this.state.maxRuns,\n    numTables: this.state.tables.length,\n    tables: this.state.tables\n  };\n\n  console.log('Send this in a POST request:', formPayload);\n  const totalTableSpots = formPayload.tables.reduce(function(a, b) {\n        return a + b.size;\n    }, 0);\n  if (formPayload.totalPlayers !== totalTableSpots) {\n    throw new Error('Number of players must match number of table spots');\n  } else {\n    let result = runOrganizer(formPayload);\n    this.props.handleTablesReady(this.state.tables);\n    this.props.handleResultReady(result);\n    this.setState({firstRun: false});\n  }\n}\n\n  render() {\n    const {\n      options,\n      totalPlayers,\n      totalRounds,\n      totalKids,\n      algorithmChoice,\n      numTimesToRun,\n      maxPlayedWithAllowed,\n      maxAveragePlayedWithAllowed,\n      minUniqueTablesAllowed,\n      maxRuns,\n      tables} = this.state;\n    return (\n      <div className='column'>\n        <h2 className='heading'>Enter Your Data</h2>\n        <div className='data-entry-section-with-subsections'>\n          <Options\n            className='data-entry-subsection'\n            options={options}\n            onOptionsChange={this.handleOptionsChange} />\n          <Details\n            className='data-entry-subsection'\n            isKidsTable={options.includes('kidsTable') ? true : false}\n            totalPlayers={totalPlayers}\n            totalRounds={totalRounds}\n            totalKids={totalKids}\n            handleNumPlayersChange={this.handleNumPlayersChange}\n            handleNumRoundsChange={this.handleNumRoundsChange}\n            handleNumKidsChange={this.handleNumKidsChange} />\n        </div>\n        <Algorithms\n          algorithmChoice={algorithmChoice}\n          totalRounds={totalRounds}\n          options={options}\n          numTimesToRun={numTimesToRun}\n          maxPlayedWithAllowed={maxPlayedWithAllowed}\n          maxAveragePlayedWithAllowed={maxAveragePlayedWithAllowed}\n          minUniqueTablesAllowed={minUniqueTablesAllowed}\n          maxRuns={maxRuns}\n          handleAlgorithmChange={this.handleAlgorithmChange}\n          handleNumberChange={this.handleNumberChange} />\n        <Tables\n          className='data-entry-section'\n          tables={tables}\n          handleTablesChange={this.handleTablesChange}/>\n        <button type='submit' className='button run-button' onClick={this.handleFormSubmit}>{this.state.firstRun ? 'Run': 'Run Again'}</button>\n        <button className='button' onClick={this.handleClearForm}>Clear Form</button>\n      </div>\n    );\n  }\n}\n\n//TODO render tables without isKidsTable option for now\n/*TODO add Configuration and Constraints middle pane or bottom/top section:\n* Runtime options: run once, get the best of x number of times, or maybe run until the conditions are met (with a max/timeout returning the best so far?)\n* Constraints: conditions to define best (e.g. no playedWithCount over 3, minimize all playedWithCounts, no stayAtTableCount over 2)\n*/\nexport default DataEntry;\n","import React, { Component } from 'react';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.renderPlayerRow = this.renderPlayerRow.bind(this);\n    this.renderTableRow = this.renderTableRow.bind(this);\n  }\n\n  download = () => {\n    const formattedData = this.formatData(this.props.result.playerList.sort((a,b) => a.id-b.id));\n    const encodedData = btoa(formattedData);\n    const dataURL = `data:text/octet-stream;base64,${encodedData}`;\n    const a = document.createElement(\"a\");\n    a.href = dataURL;\n    a.setAttribute(\"download\", \"gamefest.txt\");\n    a.click();\n  };\n\n  toBijective = n => (n > 26 ? this.toBijective(Math.floor((n - 1) / 26)) : \"\") + ((n % 26 || 26) + 9).toString(36).toUpperCase();\n\n  formatData = (data) => {\n    let formattedData = \"\";\n    data.forEach((player) => {\n      const playerTitle = `Player ${this.toBijective(player.id+1)}`;\n      let tableData = \"\";\n      player.assignedTables.forEach((tableId, index) => {\n        const tableDetails = this.props.tables.find(t => t.id === tableId);\n        const tableGame = tableDetails.games[index] && tableDetails.games[index].trim();\n        tableData += `Round ${index+1}: ${tableDetails.name}${tableGame ? ` - ${tableGame}` : ''}\\n`;\n      });\n      formattedData += `${playerTitle}\\n${tableData}\\n\\n`;\n    });\n    return formattedData;\n  };\n\n  renderPlayerRow(player) {\n    return (\n      <li key={player.id} className='result-list-item'>\n        <p>Player {player.id + 1}:</p>\n        <ol>\n          {player.assignedTables.map((tableId, index) => this.renderTableRow(player.id, index, tableId))}\n        </ol>\n      </li>\n    );\n  }\n\n  renderTableRow(playerId, tableIndex, tableId) {\n    const tableDetails = this.props.tables.find(t => t.id === tableId);\n    return (<li key={playerId + '-' + tableIndex} className='result-list-item'>{tableDetails.name} ({tableDetails.size})</li>);\n  }\n\n  renderPlayedWith(playedWithList) {\n    return playedWithList.map(player => (<li>{player.id} {player.playedWithCount}</li>));\n  }\n\n  render() {\n    const {result} = this.props;\n    return (\n      <div className='column-right'>\n        <h2 className='heading'>Results</h2>\n        <p>Max of Everyone's Max Times Played With Someone: {result.maxPlayedWithCount}</p>\n        <p>Average of Everyone's Max Times Played With Someone: {Math.round(result.averageMaxPlayedWithCount * 100) / 100}</p>\n        <p>Minimum Number of Unique Tables Visited: {result.minUniqueTablesVisited}</p>\n        <button onClick={() => this.download()} className='download-button'>Download This Result</button>\n        <ol>\n          {result.playerList.length > 0 &&\n            result.playerList.sort((a,b) => a.id-b.id).map(player => this.renderPlayerRow(player))}\n        </ol>\n      </div>\n    );\n\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataEntry from './Components/DataEntry.jsx';\nimport Results from './Components/Results.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleResultReady = this.handleResultReady.bind(this);\n    this.handleTablesReady = this.handleTablesReady.bind(this);\n\n    this.state = {\n      result: {\n        playerList: [],\n        maxPlayedWithCount: 0,\n        averageMaxPlayedWithCount: 0,\n        minUniqueTablesVisited: 0\n      }\n    }\n  }\n\n  handleResultReady = (result) => {\n    this.setState({\n      result: result\n    });\n  }\n\n  handleTablesReady = (tables) => {\n    this.setState({\n      tables: tables\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>GameFest</h1>\n        <div className='App-body'>\n          <div className='left-pane'>\n            <DataEntry\n              handleResultReady={this.handleResultReady}\n              handleTablesReady={this.handleTablesReady}/>\n          </div>\n          <div className='right-pane'>\n            <Results\n              result={this.state.result}\n              tables={this.state.tables}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}